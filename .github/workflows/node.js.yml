# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI with Jest

on:
  push:
    paths-ignore:
      - '**.md'
  pull_request:
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13 # Specify the version you need.
        env:
          POSTGRES_USER: ${{ secrets.DB_USERNAME }}
          POSTGRES_PASSWORD: ${{ secrets.DB_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DB_NAME_TEST }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Install dependencies
        run: npm ci

      - name: Run migrations
        run: npx sequelize-cli db:migrate

      - name: Run specific tests based on changed files
        env:
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME_TEST: ${{ secrets.DB_NAME_TEST }}
          APP_SECRET: ${{ secrets.APP_SECRET }}
          SALT_ROUNDS: ${{ secrets.SALT_ROUNDS }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          ALGORITHM: ${{ secrets.ALGORITHM }}
        run: |
          git diff --name-only HEAD^ HEAD | grep '^controllers/' || exit 0
          changed_files=$(git diff --name-only HEAD^ HEAD)
          for file in $changed_files; do
            base_name=$(basename $file .js)
            if [[ -f "test/${base_name}.test.js" ]]; then
              echo "Running tests for ${base_name}"
              npx jest "test/${base_name}.test.js"
            fi
          done
